<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Dan Gillis</title><link>https://gilcrest.github.io/posts/</link><description>Recent content in Posts on Dan Gillis</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 11 Jan 2023 10:35:00 -0400</lastBuildDate><atom:link href="https://gilcrest.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>oplint: The op linter</title><link>https://gilcrest.github.io/posts/oplint/</link><pubDate>Wed, 11 Jan 2023 10:35:00 -0400</pubDate><guid>https://gilcrest.github.io/posts/oplint/</guid><description>I made a new linter called oplint! This was a really fun thing to do as I had never ventured into static analysis before. I created this tool to help me understand where an error originates without using the pkg/errors error stack functionality. The pkg/errors project has been archived and it seems the Go community has largely moved on to just wrapping errors using the standard library. I am moving away from using pkg/errors to use only the standard library as well, and am trying to make sure I can trace an error source in a standardized way.</description></item><item><title>Low-Dependency Database Migrations and Integration</title><link>https://gilcrest.github.io/posts/migrations/</link><pubDate>Tue, 15 Mar 2022 07:30:00 -0400</pubDate><guid>https://gilcrest.github.io/posts/migrations/</guid><description>A few weeks ago, I gave a presentation to the Boston Go Meetup on Low-Dependency Database Migrations and Integration, in which I discuss how I handle database migrations and database integration in the go-api-basic project that I&amp;rsquo;ve been working on. In the presentation I mention several tools that I use, so I wanted to add links to them here.
Mage PostgreSQL JetBrains DataGrip sqlc The video for the talk is below:</description></item><item><title>Logging in go-api-basic</title><link>https://gilcrest.github.io/posts/logging/</link><pubDate>Tue, 13 Jul 2021 07:30:00 -0400</pubDate><guid>https://gilcrest.github.io/posts/logging/</guid><description>Thoughts on Logging I&amp;rsquo;ve gone through a few logging phases in my career. I logged everything. It was great, until the logs became meaningless because there were too many. I logged only errors, but in some cases that was not enough. Now I&amp;rsquo;m somewhere in the middle. I do believe in logging all errors and detailed how I do that in my last post. There are also times when it&amp;rsquo;s helpful to have some debugging logs in place.</description></item><item><title>REST API Error Handling in Go</title><link>https://gilcrest.github.io/posts/errors/</link><pubDate>Mon, 21 Jun 2021 10:35:00 -0400</pubDate><guid>https://gilcrest.github.io/posts/errors/</guid><description>Handling errors is really important in Go. Errors are first class citizens and there are many different approaches for handling them. Initially I started off basing my error handling almost entirely on a blog post from Rob Pike and created a carve-out from his code to meet my needs. It served me well for a long time, but found over time I wanted a way to easily get a stacktrace of the error, which led me to Dave Cheney&amp;rsquo;s https://github.</description></item><item><title>Emerging from my Gopher Hole</title><link>https://gilcrest.github.io/posts/gopherhole/</link><pubDate>Mon, 21 Jun 2021 10:30:00 -0400</pubDate><guid>https://gilcrest.github.io/posts/gopherhole/</guid><description>Inspiration I was inspired recently after listening to Go Time FM episode #167 and Johnny Boursiquot&amp;rsquo;s callout:
&amp;ldquo;If you are out there, and I&amp;rsquo;m speaking to you listener, or watcher, if you are out there and thinking/meaning to muster up the energy or overcome the imposter syndrome to write a blog post that&amp;rsquo;s beginner, but you&amp;rsquo;re thinking &amp;ldquo;Oh man, everyone&amp;rsquo;s already written a beginner blog post on this thing, my voice doesn&amp;rsquo;t really matter I&amp;rsquo;m not going to really add anything to that&amp;rdquo; - you need to get over that.</description></item><item><title>Jekyll to Hugo Conversion</title><link>https://gilcrest.github.io/posts/conversion/</link><pubDate>Thu, 27 May 2021 08:06:25 +0600</pubDate><guid>https://gilcrest.github.io/posts/conversion/</guid><description>Today I converted my old posts from jekyll to HUGO and archived them for posterity. It&amp;rsquo;s fun to look back at some of those posts now &amp;ndash; so much has changed for me&amp;hellip;
My new site is going to start minimalist, and I&amp;rsquo;ll add to it over time.
I&amp;rsquo;m using the Toha theme, which has great guides</description></item><item><title>HTTP Logging and Go API Template Updates</title><link>https://gilcrest.github.io/posts/archive/http-logging-and-go-api-template-updates/</link><pubDate>Sat, 13 Oct 2018 07:10:00 -0400</pubDate><guid>https://gilcrest.github.io/posts/archive/http-logging-and-go-api-template-updates/</guid><description>I built my first Go library! httplog provides middleware which logs http requests and responses along with a few other features I find useful. I thought it might be helpful for some. At the very least, I tried to document the library reasonably well, spending a lot of time developing the README and ensuring the GoDoc was in good shape. I learned a lot through this exercise.
I also restructured my Go API template repository to try and shape it based on Mat Ryer’s fantastic “How I write Go HTTP services after seven years” post.</description></item><item><title>Basic Redis Examples with Go</title><link>https://gilcrest.github.io/posts/archive/basic-redis-examples/</link><pubDate>Tue, 17 Jul 2018 20:38:00 -0400</pubDate><guid>https://gilcrest.github.io/posts/archive/basic-redis-examples/</guid><description>Redis is pretty great. It is the #1 most loved database for the second year in a row, according to a recent Stack Overflow survey. I decided it was high time I taught myself how to use it with Go.
There are a number of libraries in the Go ecosystem for Redis, but the two most popular are go-redis and redigo. Each library has a decent amount of stars, contributors, etc.</description></item><item><title>Containerizing a Go API with Docker For Mac</title><link>https://gilcrest.github.io/posts/archive/containerize-go-api/</link><pubDate>Fri, 06 Apr 2018 07:10:00 -0400</pubDate><guid>https://gilcrest.github.io/posts/archive/containerize-go-api/</guid><description>I’m working through creating a RESTful API template. As part of it, I want to be able to “Containerize” my app using docker and deploy it to “the cloud”. Baby steps for me though — I want to get everything working locally first. This post is about “containerizing” my API using Docker and getting it to work locally on my Mac. Right now, from a networking perspective, my app is pretty simple — it needs connectivity on two ports: 1 port for database traffic, 1 port for http traffic.</description></item><item><title>HTTP JSON Error Responses in Go</title><link>https://gilcrest.github.io/posts/archive/http-json-error-responses/</link><pubDate>Sun, 18 Mar 2018 07:10:00 -0400</pubDate><guid>https://gilcrest.github.io/posts/archive/http-json-error-responses/</guid><description>I like simple structured messages using JSON in error responses, similar to Stripe, Uber and many others…
{ &amp;#34;error&amp;#34;: { &amp;#34;type&amp;#34;: &amp;#34;validation_failed&amp;#34;, &amp;#34;message&amp;#34;: &amp;#34;Username is a required field&amp;#34; } } In my last story, I wrote about HTTP Logging and in that I mentioned that I have used “chained” middleware using the Adapter pattern from Mat Ryer’s excellent post. You’ll see that below, but also in addition, I’m wrapping my final true app handler (in this case, CreateUser) inside an ErrHandler type — eh.</description></item><item><title>Drums: King Crimson Red Live @ Great Scott</title><link>https://gilcrest.github.io/posts/archive/king-crimson-red/</link><pubDate>Wed, 14 Mar 2018 18:06:25 -0400</pubDate><guid>https://gilcrest.github.io/posts/archive/king-crimson-red/</guid><description>Fun show a couple nights ago @ Great Scott in Allston. Cover of King Crimson&amp;rsquo;s Red&amp;hellip;
King Crimson Cover - Red</description></item><item><title>Go API Template v0.0.2</title><link>https://gilcrest.github.io/posts/archive/go-api-template/</link><pubDate>Fri, 20 Oct 2017 07:10:00 -0400</pubDate><guid>https://gilcrest.github.io/posts/archive/go-api-template/</guid><description>Hello Gopher community! This represents my first code release, albeit a minor one. I&amp;rsquo;m hopeful that this will be helpful. I believe in templates and am trying to put together a working API template from all the best practices I&amp;rsquo;ve found in the Go community. There&amp;rsquo;s more details on the github readme here
Thanks!</description></item><item><title>And then there was Go...</title><link>https://gilcrest.github.io/posts/archive/go/</link><pubDate>Mon, 09 Jan 2017 02:45:00 -0400</pubDate><guid>https://gilcrest.github.io/posts/archive/go/</guid><description>Eureka! After many many brushes with many different languages over many many years, I think I finally found the language that is right for me - Go! It&amp;rsquo;s hard to say why really, but something about learning this language feels right - it&amp;rsquo;s well thought out, has a great community and is making programming fun again for me. It&amp;rsquo;s built in http libraries are incredible. I&amp;rsquo;m just beginning, but this could be my forever language :)</description></item><item><title>Drums: Frankenstein Practice</title><link>https://gilcrest.github.io/posts/archive/frankenstein/</link><pubDate>Thu, 28 Apr 2016 18:06:25 -0400</pubDate><guid>https://gilcrest.github.io/posts/archive/frankenstein/</guid><description>Had a great practice and took some fun footage of us playing Frankenstein.
Edgar Winter Cover - Frankenstein</description></item><item><title>Setting up OS X El Capitan for node development with node-oracledb</title><link>https://gilcrest.github.io/posts/archive/osx-oracle-node-setup/</link><pubDate>Tue, 05 Apr 2016 15:42:00 -0400</pubDate><guid>https://gilcrest.github.io/posts/archive/osx-oracle-node-setup/</guid><description>After stumbling through the setup of Oracle (for use with node and node-oracledb) on my new and first ever Macbook, I thought I&amp;rsquo;d put together a one pager on setup for those who may have had similar struggles. I was able to find everything I needed through existing pages, but I bounced around a lot to several different sites to find all the information and it took me several attempts. I tried to cobble all the steps together in a fairly verbose way as I had to learn certain things along the way&amp;hellip;</description></item><item><title>Drums: Raju Live @ O'Brien's</title><link>https://gilcrest.github.io/posts/archive/drums-raju-live/</link><pubDate>Wed, 16 Mar 2016 18:06:25 -0400</pubDate><guid>https://gilcrest.github.io/posts/archive/drums-raju-live/</guid><description>Fun show last night @ O&amp;rsquo;Brien&amp;rsquo;s in Allston. Friend of mine grabbed this clip with his phone. There is some troubling drum face happening here&amp;hellip;
John McLaughlin Cover - Raju</description></item><item><title>Apex 5 - Minimize Left Sidebar Navigation by Default</title><link>https://gilcrest.github.io/posts/archive/apex-minimize/</link><pubDate>Thu, 15 Oct 2015 20:38:00 -0400</pubDate><guid>https://gilcrest.github.io/posts/archive/apex-minimize/</guid><description>You may find yourself in a situation where you proudly unveil your upgraded-to-Universal Theme app to your user-base after working on it for months with your beautiful wide screen monitor (page designer pretty much mandates this) and your user-base is not quite as happy as you thought they&amp;rsquo;d be as they don&amp;rsquo;t all have super wide screens and they, for some reason, have low-resolution monitors (like 1280 x 768 low). The users may think your super cool left sidebar navigation, which is maximized by default, is neat, but they&amp;rsquo;d actually prefer their space back&amp;hellip; If you should find yourself in this situation, there is an easy answer!</description></item><item><title>Raiser v0.5 - Committed to Github</title><link>https://gilcrest.github.io/posts/archive/raiser/</link><pubDate>Mon, 17 Aug 2015 12:39:00 -0400</pubDate><guid>https://gilcrest.github.io/posts/archive/raiser/</guid><description>I just released an early version of my &amp;ldquo;raiser&amp;rdquo; code for Oracle PL/SQL, leveraging OraOpenSource&amp;rsquo;s logger utility. I&amp;rsquo;d love to get anyone&amp;rsquo;s input and help with it. The Github project is https://github.com/gilcrest/raiser
As background, I&amp;rsquo;ve used the Quest Error Manager (QEM) in my codebase for years, but have recently switched primarily to using logger for most things. There are a few things that QEM does that logger does not&amp;hellip; In a highly distributed environment, you really need to be able to raise an exception to a user with a particular error message and unique identifier.</description></item><item><title>My Path to node.js and Oracle Glory - Volume 3</title><link>https://gilcrest.github.io/posts/archive/node-oracle-glory/volume-3/</link><pubDate>Mon, 16 Mar 2015 14:02:00 -0400</pubDate><guid>https://gilcrest.github.io/posts/archive/node-oracle-glory/volume-3/</guid><description>Next step - node.js setup on Ubuntu. This was remarkably easy! I went to https://nodejs.org/ and viewed their Downloads section, where I then went to &amp;ldquo;Installing from package managers&amp;rdquo;. That link takes you to this URL on GitHub. If you read the first line of &amp;ldquo;Debian and Ubuntu based Linux distributions&amp;rdquo;, you&amp;rsquo;ll note you should go to nodesource&amp;rsquo;s blog post for the most up to date instructions. I did what I was told - read what they have to say on the page - helpful stuff!</description></item><item><title>My Path to node.js and Oracle Glory - Volume 2</title><link>https://gilcrest.github.io/posts/archive/node-oracle-glory/volume-2/</link><pubDate>Sat, 14 Mar 2015 11:25:00 -0400</pubDate><guid>https://gilcrest.github.io/posts/archive/node-oracle-glory/volume-2/</guid><description>OK, so now having established my database server in Volume 1 of this series, I now need to move to the next step - setting up my chromebook with Linux in order to facilitate node.js development. I chose a chromebook as my dev machine of choice as I wanted something that natively runs on Linux, but didn&amp;rsquo;t want to pay as much as a Mac and didn&amp;rsquo;t really like the Linux based machine options out there&amp;hellip; Google is doing a great job with these and after having my chromebook for a little over a week - I have to say I love it&amp;hellip;</description></item><item><title>My Path to node.js and Oracle Glory - Volume 1</title><link>https://gilcrest.github.io/posts/archive/node-oracle-glory/volume-1/</link><pubDate>Mon, 09 Mar 2015 20:33:00 -0400</pubDate><guid>https://gilcrest.github.io/posts/archive/node-oracle-glory/volume-1/</guid><description>I am starting a new personal project with the following goals in mind:
Learn JavaScript (I&amp;rsquo;m a beginner, but been reading/implementing for a while) Learn node.js Create a RESTful API using node.js calling a remote database server using Oracle&amp;rsquo;s node driver (node-oracledb) API should be simple to understand API in the backend should use the HR sample schema When using node.js, goal is to form a service request object in javascript and pass that object to a stored procedure in Oracle as an IN parameter, the same stored procedure should return a response object that will be parsed in javascript and the results displayed DISCLAIMER - When I actually have free time to develop - I am primarily a PL/SQL developer &amp;ndash; I love PL/SQL - there I said it!</description></item><item><title>Name:Value Encryption Utility using PL/SQL</title><link>https://gilcrest.github.io/posts/archive/name-value-encryption/</link><pubDate>Wed, 17 Dec 2014 08:01:05 -0400</pubDate><guid>https://gilcrest.github.io/posts/archive/name-value-encryption/</guid><description>I recently ran into an issue where, as part of a webservice call I was making using the Oracle APEX_WEB_SERVICE API, I needed to pass the application id and password in the soap header, but I did not want those sensitive data elements to be exposed in my pl/sql code in cleartext. I decided I wanted to encrypt the data and retrieve it at run time as a function call. I tried to find a way to do this via Stack Overflow, Google, etc.</description></item></channel></rss>