[{"categories":null,"contents":"Este archivo existe únicamente para responder a la URL /search con la plantilla de diseño search relacionada.\nNo se muestra ningún contenido aquí, todo el contenido se basa en la plantilla layouts/page/search.html\nEstablecer una prioridad muy baja en el mapa del sitio le dirá a los motores de búsqueda que éste no es un contenido importante.\nEsta implementación utiliza Fusejs, jquery y mark.js\nConfiguración inicial La búsqueda depende del tipo de contenido de salida adicional de JSON en config.toml\n``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nBúsqueda de archivos adicionales Para buscar campos adicionales definidos en el front matter, debes añadirlo en 2 lugares.\nEditar layouts/_default/index.JSON Esto expone los valores en /index.json: por ejemplo, para agregar categories ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEditar las opciones de fuse.js para buscar static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://gilcrest.github.io/search/","summary":"Este archivo existe únicamente para responder a la URL /search con la plantilla de diseño search relacionada.\nNo se muestra ningún contenido aquí, todo el contenido se basa en la plantilla layouts/page/search.html\nEstablecer una prioridad muy baja en el mapa del sitio le dirá a los motores de búsqueda que éste no es un contenido importante.\nEsta implementación utiliza Fusejs, jquery y mark.js\nConfiguración inicial La búsqueda depende del tipo de contenido de salida adicional de JSON en config.","tags":null,"title":"Resultados de Búsqueda"},{"categories":null,"contents":"Este archivo existe únicamente para responder a la URL /search con la plantilla de diseño search relacionada.\nNo se muestra ningún contenido aquí, todo el contenido se basa en la plantilla layouts/page/search.html\nEstablecer una prioridad muy baja en el mapa del sitio le dirá a los motores de búsqueda que éste no es un contenido importante.\nEsta implementación utiliza Fusejs, jquery y mark.js\nConfiguración inicial La búsqueda depende del tipo de contenido de salida adicional de JSON en config.toml\n``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nBúsqueda de archivos adicionales Para buscar campos adicionales definidos en el front matter, debes añadirlo en 2 lugares.\nEditar layouts/_default/index.JSON Esto expone los valores en /index.json: por ejemplo, para agregar categories ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEditar las opciones de fuse.js para buscar static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://gilcrest.github.io/search/","summary":"Este archivo existe únicamente para responder a la URL /search con la plantilla de diseño search relacionada.\nNo se muestra ningún contenido aquí, todo el contenido se basa en la plantilla layouts/page/search.html\nEstablecer una prioridad muy baja en el mapa del sitio le dirá a los motores de búsqueda que éste no es un contenido importante.\nEsta implementación utiliza Fusejs, jquery y mark.js\nConfiguración inicial La búsqueda depende del tipo de contenido de salida adicional de JSON en config.","tags":null,"title":"Resultados de Búsqueda"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://gilcrest.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://gilcrest.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://gilcrest.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://gilcrest.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://gilcrest.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://gilcrest.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://gilcrest.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://gilcrest.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://gilcrest.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://gilcrest.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://gilcrest.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://gilcrest.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://gilcrest.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://gilcrest.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://gilcrest.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://gilcrest.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://gilcrest.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://gilcrest.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://gilcrest.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://gilcrest.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://gilcrest.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://gilcrest.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"অনুসন্ধানের ফলাফল"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://gilcrest.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"অনুসন্ধানের ফলাফল"},{"categories":null,"contents":"Handling errors is really important in Go. Errors are first class citizens and there are many different approaches for handling them. Initially I started off basing my error handling almost entirely on a blog post from Rob Pike and created a carve-out from his code to meet my needs. It served me well for a long time, but found over time I wanted a way to easily get a stacktrace of the error, which led me to Dave Cheney\u0026rsquo;s https://github.com/pkg/errors package. I now use a combination of the two. The implementation below is sourced from my go-api-basic repo, indeed, this post will be folded into its README as well.\nRequirements My requirements for REST API error handling are the following:\n Requests for users who are not properly authenticated should return a 401 Unauthorized error with a WWW-Authenticate response header and an empty response body. Requests for users who are authenticated, but do not have permission to access the resource, should return a 403 Forbidden error with an empty response body. All requests which are due to a client error (invalid data, malformed JSON, etc.) should return a 400 Bad Request and a response body which looks similar to the following:  { \u0026#34;error\u0026#34;: { \u0026#34;kind\u0026#34;: \u0026#34;input_validation_error\u0026#34;, \u0026#34;param\u0026#34;: \u0026#34;director\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;director is required\u0026#34; } }  All requests which incur errors as a result of an internal server or database error should return a 500 Internal Server Error and not leak any information about the database or internal systems to the client. These errors should return a response body which looks like the following:  { \u0026#34;error\u0026#34;: { \u0026#34;kind\u0026#34;: \u0026#34;internal_error\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;internal server error - please contact support\u0026#34; } } All errors should return a Request-Id response header with a unique request id that can be used for debugging to find the corresponding error in logs.\nImplementation All errors should be raised using custom errors from the domain/errs package. The three custom errors correspond directly to the requirements above.\nTypical Errors Typically, errors raised throughout go-api-basic are the custom errs.Error, which looks like:\ntype Error struct { // User is the username of the user attempting the operation.  User UserName // Kind is the class of error, such as permission failure,  // or \u0026#34;Other\u0026#34; if its class is unknown or irrelevant.  Kind Kind // Param represents the parameter related to the error.  Param Parameter // Code is a human-readable, short representation of the error  Code Code // The underlying error that triggered this one, if any.  Err error } These errors are raised using the E function from the domain/errs package. errs.E is taken from Rob Pike\u0026rsquo;s upspin errors package (but has been changed based on my requirements). The errs.E function call is variadic and can take several different types to form the custom errs.Error struct.\nHere is a simple example of creating an error using errs.E:\nerr := errs.E(\u0026#34;seems we have an error here\u0026#34;) When a string is sent, an error will be created using the errors.New function from github.com/pkg/errors and added to the Err element of the struct, which allows retrieval of the error stacktrace later on. In the above example, User, Kind, Param and Code would all remain unset.\nYou can set any of these custom errs.Error fields that you like, for example:\nfunc (m *Movie) SetReleased(r string) (*Movie, error) { t, err := time.Parse(time.RFC3339, r) if err != nil { return nil, errs.E(errs.Validation, errs.Code(\u0026#34;invalid_date_format\u0026#34;), errs.Parameter(\u0026#34;release_date\u0026#34;), err) } m.Released = t return m, nil } Above, we used errs.Validation to set the errs.Kind as Validation. Valid error Kind are:\nconst ( Other Kind = iota // Unclassified error. This value is not printed in the error message.  Invalid // Invalid operation for this type of item.  IO // External I/O error such as network failure.  Exist // Item already exists.  NotExist // Item does not exist.  Private // Information withheld.  Internal // Internal error or inconsistency.  BrokenLink // Link target does not exist.  Database // Error from database.  Validation // Input validation error.  Unanticipated // Unanticipated error.  InvalidRequest // Invalid Request ) errs.Code represents a short code to respond to the client with for error handling based on codes (if you choose to do this) and is any string you want to pass.\nerrs.Parameter represents the parameter that is being validated or has problems, etc.\n Note in the above example, instead of passing a string and creating a new error inside the errs.E function, I am directly passing the error returned by the time.Parse function to errs.E. The error is then added to the Err field using errors.WithStack from the github.com/pkg/errors package. This will enable stacktrace retrieval later as well.\n There are a few helpers in the errs package as well, namely the errs.MissingField function which can be used when validating missing input on a field. This idea comes from this Mat Ryer post and is pretty handy.\nHere is an example in practice:\n// IsValid performs validation of the struct func (m *Movie) IsValid() error { switch { case m.Title == \u0026#34;\u0026#34;: return errs.E(errs.Validation, errs.Parameter(\u0026#34;title\u0026#34;), errs.MissingField(\u0026#34;title\u0026#34;)) The error message for the above would read title is required\nThere is also errs.InputUnwanted which is meant to be used when a field is populated with a value when it is not supposed to be.\nTypical Error Flow As errors created with errs.E move up the call stack, they can just be returned, like the following:\nfunc inner() error { return errs.E(\u0026#34;seems we have an error here\u0026#34;) } func middle() error { err := inner() if err != nil { return err } return nil } func outer() error { err := middle() if err != nil { return err } return nil }  In the above example, the error is created in the inner function - middle and outer return the error as is typical in Go.\n You can add additional context fields (errs.Code, errs.Parameter, errs.Kind) as the error moves up the stack, however, I try to add as much context as possible at the point of error origin and only do this in rare cases.\nHandler Flow At the top of the program flow for each service is the app service handler (for example, DefaultMovieHandlers.CreateMovie). In the app service handler, any error returned from any function or method is sent through the errs.HTTPErrorResponse function along with the http.ResponseWriter and a zerolog.Logger.\nFor example:\n// Call the NewMovie method for struct initialization m, err := movie.NewMovie(uuid.New(), extlID, u) if err != nil { errs.HTTPErrorResponse(w, logger, err) return } errs.HTTPErrorResponse takes the custom error (errs.Error, errs.Unauthenticated or errs.UnauthorizedError), writes the response to the given http.ResponseWriter and logs the error using the given zerolog.Logger.\n return must be called immediately after errs.HTTPErrorResponse to return the error to the client.\n Typical Error Response For the errs.Error type, errs.HTTPErrorResponse writes the HTTP response body as JSON using the errs.ErrResponse struct.\n// ErrResponse is used as the Response Body type ErrResponse struct { Error ServiceError `json:\u0026#34;error\u0026#34;` } // ServiceError has fields for Service errors. All fields with no data will // be omitted type ServiceError struct { Kind string `json:\u0026#34;kind,omitempty\u0026#34;` Code string `json:\u0026#34;code,omitempty\u0026#34;` Param string `json:\u0026#34;param,omitempty\u0026#34;` Message string `json:\u0026#34;message,omitempty\u0026#34;` } When the error is returned to the client, the response body JSON looks like the following:\n{ \u0026#34;error\u0026#34;: { \u0026#34;kind\u0026#34;: \u0026#34;input_validation_error\u0026#34;, \u0026#34;code\u0026#34;: \u0026#34;invalid_date_format\u0026#34;, \u0026#34;param\u0026#34;: \u0026#34;release_date\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;parsing time \\\u0026#34;1984a-03-02T00:00:00Z\\\u0026#34; as \\\u0026#34;2006-01-02T15:04:05Z07:00\\\u0026#34;: cannot parse \\\u0026#34;a-03-02T00:00:00Z\\\u0026#34; as \\\u0026#34;-\\\u0026#34;\u0026#34; } } In addition, the error is logged. If zerolog.ErrorStackMarshaler is set to log error stacks (more about this in a later post), the logger will log the full error stack, which can be super helpful when trying to identify issues.\nThe error log will look like the following (I cut off parts of the stack for brevity):\n{ \u0026#34;level\u0026#34;: \u0026#34;error\u0026#34;, \u0026#34;ip\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;user_agent\u0026#34;: \u0026#34;PostmanRuntime/7.26.8\u0026#34;, \u0026#34;request_id\u0026#34;: \u0026#34;bvol0mtnf4q269hl3ra0\u0026#34;, \u0026#34;stack\u0026#34;: [{ \u0026#34;func\u0026#34;: \u0026#34;E\u0026#34;, \u0026#34;line\u0026#34;: \u0026#34;172\u0026#34;, \u0026#34;source\u0026#34;: \u0026#34;errs.go\u0026#34; }, { \u0026#34;func\u0026#34;: \u0026#34;(*Movie).SetReleased\u0026#34;, \u0026#34;line\u0026#34;: \u0026#34;76\u0026#34;, \u0026#34;source\u0026#34;: \u0026#34;movie.go\u0026#34; }, { \u0026#34;func\u0026#34;: \u0026#34;(*MovieController).CreateMovie\u0026#34;, \u0026#34;line\u0026#34;: \u0026#34;139\u0026#34;, \u0026#34;source\u0026#34;: \u0026#34;create.go\u0026#34; }, { ... }], \u0026#34;error\u0026#34;: \u0026#34;parsing time \\\u0026#34;1984a-03-02T00:00:00Z\\\u0026#34; as \\\u0026#34;2006-01-02T15:04:05Z07:00\\\u0026#34;: cannot parse \\\u0026#34;a-03-02T00:00:00Z\\\u0026#34; as \\\u0026#34;-\\\u0026#34;\u0026#34;, \u0026#34;HTTPStatusCode\u0026#34;: 400, \u0026#34;Kind\u0026#34;: \u0026#34;input_validation_error\u0026#34;, \u0026#34;Parameter\u0026#34;: \u0026#34;release_date\u0026#34;, \u0026#34;Code\u0026#34;: \u0026#34;invalid_date_format\u0026#34;, \u0026#34;time\u0026#34;: 1609650267, \u0026#34;severity\u0026#34;: \u0026#34;ERROR\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;Response Error Sent\u0026#34; }  Note: E will usually be at the top of the stack as it is where the errors.New or errors.WithStack functions are being called.\n Internal or Database Error Response There is logic within errs.HTTPErrorResponse to return a different response body if the errs.Kind is Internal or Database. As per the requirements, we should not leak the error message or any internal stack, etc. when an internal or database error occurs. If an error comes through and is an errs.Error with either of these error Kind or is unknown error type in any way, the response will look like the following:\n{ \u0026#34;error\u0026#34;: { \u0026#34;kind\u0026#34;: \u0026#34;internal_error\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;internal server error - please contact support\u0026#34; } }  Unauthenticated Errors type UnauthenticatedError struct { // WWWAuthenticateRealm is a description of the protected area.  // If no realm is specified, \u0026#34;DefaultRealm\u0026#34; will be used as realm  WWWAuthenticateRealm string // The underlying error that triggered this one, if any.  Err error } The spec for 401 Unauthorized calls for a WWW-Authenticate response header along with a realm. The realm should be set when creating an Unauthenticated error. The errs.NewUnauthenticatedError function initializes an UnauthenticatedError.\n I generally like to follow the Go idiom for brevity in all things as much as possible, but for Unauthenticated vs. Unauthorized errors, it\u0026rsquo;s confusing enough as it is already, I don\u0026rsquo;t take any shortcuts.\n func NewUnauthenticatedError(realm string, err error) *UnauthenticatedError { return \u0026amp;UnauthenticatedError{WWWAuthenticateRealm: realm, Err: err} } Unauthenticated Error Flow The errs.Unauthenticated error should only be raised at points of authentication. I will get into application flow in detail in later posts, but authentication for go-api-basic happens in middleware handlers prior to calling the app handler for the given route.\n The WWW-Authenticate realm is set to the request context using the DefaultRealmHandler middleware in the handlers package prior to attempting authentication. Next, the Oauth2 access token is retrieved from the Authorization http header using the AccessTokenHandler middleware. There are several access token validations in this middleware, if any are not successful, the errs.Unauthenticated error is returned using the realm set to the request context. Finally, if the access token is successfully retrieved, it is then converted to a User via the GoogleAccessTokenConverter.Convert method in the gateway/authgateway package. This method sends an outbound request to Google using their API; if any errors are returned, an errs.Unauthenticated error is returned.   In general, I do not like to use context.Context, however, it is used in go-api-basic to pass values between middlewares. The WWW-Authenticate realm, the Oauth2 access token and the calling user after authentication, all of which are request-scoped values, are all set to the request context.Context.\n Unauthenticated Error Response Per requirements, go-api-basic does not return a response body when returning an Unauthenticated error. The error response from cURL looks like the following:\nHTTP/1.1 401 Unauthorized Request-Id: c30hkvua0brkj8qhk3e0 Www-Authenticate: Bearer realm=\u0026#34;go-api-basic\u0026#34; Date: Wed, 09 Jun 2021 19:46:07 GMT Content-Length: 0  Unauthorized Errors type UnauthorizedError struct { // The underlying error that triggered this one, if any.  Err error } The errs.NewUnauthorizedError function initializes an UnauthorizedError.\nUnauthorized Error Flow The errs.Unauthorized error is raised when there is a permission issue for a user when attempting to access a resource. Currently, go-api-basic\u0026rsquo;s placeholder authorization implementation DefaultAuthorizer.Authorize in the domain/auth package performs rudimentary checks that a user has access to a resource. If the user does not have access, the errs.Unauthorized error is returned.\nPer requirements, go-api-basic does not return a response body when returning an Unauthorized error. The error response from cURL looks like the following:\nHTTP/1.1 403 Forbidden Request-Id: c30hp2ma0brkj8qhk3f0 Date: Wed, 09 Jun 2021 19:54:50 GMT Content-Length: 0  404 Error Illustration by Pixeltrue from Ouch!\n","date":"June 3, 2021","hero":"/posts/errors/hero.svg","permalink":"https://gilcrest.github.io/posts/errors/","summary":"Handling errors is really important in Go. Errors are first class citizens and there are many different approaches for handling them. Initially I started off basing my error handling almost entirely on a blog post from Rob Pike and created a carve-out from his code to meet my needs. It served me well for a long time, but found over time I wanted a way to easily get a stacktrace of the error, which led me to Dave Cheney\u0026rsquo;s https://github.","tags":null,"title":"REST API Error Handling in Go"},{"categories":null,"contents":"Today I converted my old posts from jekyll to HUGO and archived them for posterity. It\u0026rsquo;s fun to look back at some of those posts now \u0026ndash; so much has changed for me\u0026hellip;\nMy new site is going to start minimalist and I\u0026rsquo;ll add to it over time.\nI\u0026rsquo;m using the Toha theme, which has great guides\n","date":"May 27, 2021","hero":"/posts/conversion/hero.svg","permalink":"https://gilcrest.github.io/posts/conversion/","summary":"Today I converted my old posts from jekyll to HUGO and archived them for posterity. It\u0026rsquo;s fun to look back at some of those posts now \u0026ndash; so much has changed for me\u0026hellip;\nMy new site is going to start minimalist and I\u0026rsquo;ll add to it over time.\nI\u0026rsquo;m using the Toha theme, which has great guides","tags":null,"title":"Jekyll to Hugo Conversion"},{"categories":null,"contents":"I built my first Go library! httplog provides middleware which logs http requests and responses along with a few other features I find useful. I thought it might be helpful for some. At the very least, I tried to document the library reasonably well, spending a lot of time developing the README and ensuring the GoDoc was in good shape. I learned a lot through this exercise.\nI also restructured my Go API template repository to try and shape it based on Mat Ryer’s fantastic “How I write Go HTTP services after seven years” post. I think/hope that I got the fundamentals right from the lessons he was trying to impart and have baked them into this template repo.\nAt a high level, using the template and httplog library, you can send a request that looks like this:\nand get a response body that looks like this:\nIf turned on, the request and/or response are logged either to stdout or a PostgreSQL database (or both) and can then be used for investigative purposes, etc. You can also set options whether or not to log request/response headers and body. For instance, this example service takes password in the body, you should not log this and would turn off request body logging for this API.\nAs I mentioned above, I found the post from Mat Ryer to be extremely compelling and completely restructured my template. I now have a server struct, a la:\nI have a routes.go file where all my routing lives…\nand my handlers hang off the server with request and response structs defined within the handler…\nI haven’t incorporated everything (still need to get to the testing stuff, etc.), but it’s a good start.\nThere’s a lot more happening in the Go API template (password hashing, graceful error handling, etc.) and I plan to bake even more into it as I continue to learn. For instance, this week’s release of Go Cloud’s Wire makes me want to revisit my template again and add in dependency injection. I just added it to my list, actually….\nFinally, I’ve been coding Go in a vacuum for a year as I don’t actually know anyone else who writes Go. I know it’s cliche, but I really do welcome feedback to help me learn. Thanks!\n","date":"October 13, 2018","hero":"/images/default-hero.jpg","permalink":"https://gilcrest.github.io/posts/archive/http-logging-and-go-api-template-updates/","summary":"I built my first Go library! httplog provides middleware which logs http requests and responses along with a few other features I find useful. I thought it might be helpful for some. At the very least, I tried to document the library reasonably well, spending a lot of time developing the README and ensuring the GoDoc was in good shape. I learned a lot through this exercise.\nI also restructured my Go API template repository to try and shape it based on Mat Ryer’s fantastic “How I write Go HTTP services after seven years” post.","tags":null,"title":"HTTP Logging and Go API Template Updates"},{"categories":null,"contents":"Redis is pretty great. It is the #1 most loved database for the second year in a row, according to a recent Stack Overflow survey. I decided it was high time I taught myself how to use it with Go.\nThere are a number of libraries in the Go ecosystem for Redis, but the two most popular are go-redis and redigo. Each library has a decent amount of stars, contributors, etc. but from what I can tell redigo seems to have a slight edge in terms of documentation and community acceptance. For instance, the mighty Redis Labs, has a couple of posts describing interacting with Redis via Go using redigo — it’s not a direct endorsement, but pretty close… I tried both libraries actually, but found redigo was better documented. That said, in order to get up and running quickly with redigo, having to troll through godoc was a bit cumbersome (I’m still getting my head around analyzing godoc TBH). In this post, I’ll attempt to give some simple examples for redigo that may prove helpful to some.\nBelow I take you through creating a connection pool, testing connectivity via the PING command, adding a simple Key:Value pair via the SET command, retrieving a given value given the GET command and finally storing a struct as JSON using the SET command and retrieving the same struct with the GET command.\nTL;DR — For the full main.go with all the examples below, you can find them here.\nPOOL To establish connectivity in redigo, you need to create a redis.Pool object which is a pool of connections to Redis. In order to do this, you can use something like the following:\nfunc newPool() *redis.Pool { return \u0026amp;redis.Pool{ // Maximum number of idle connections in the pool.  MaxIdle: 80, // max number of connections  MaxActive: 12000, // Dial is an application supplied function for creating and  // configuring a connection.  Dial: func() (redis.Conn, error) { c, err := redis.Dial(\u0026#34;tcp\u0026#34;, \u0026#34;:6379\u0026#34;) if err != nil { panic(err.Error()) } return c, err }, } } Use the Get method of the Pool object to grab a connection from the pool. Per the redigo documentation, “The application must call the connection Close method when the application is done with the connection.”\nfunc main() { pool := newPool() conn := pool.Get() defer conn.Close() err := ping(conn) if err != nil { fmt.Println(err) } ... PING If you wish you to simply check connectivity, you can use Redis’ PING command.\n// ping tests connectivity for redis (PONG should be returned) func ping(c redis.Conn) error { // Send PING command to Redis  pong, err := c.Do(\u0026#34;PING\u0026#34;) if err != nil { return err } // PING command returns a Redis \u0026#34;Simple String\u0026#34;  // Use redis.String to convert the interface type to string  s, err := redis.String(pong, err) if err != nil { return err } fmt.Printf(\u0026#34;PING Response = %s\\n\u0026#34;, s) // Output: PONG  return nil } To break down what’s happening here — the function takes in a redis Conn type (connection). We are calling the Do method of Conn, which takes a Redis command as it’s first argument. The redigo client communicates to Redis using Redis’ RESP protocol. Redis then responds with one of several types (Simple Strings, Errors, Integers, Bulk Strings and Arrays), which are mapped to Go types. The response from the Do method does not give back the specific Go type though, but rather an interface{} type. We can use a type assertion to determine the response type from the Do method, but seeing as we know from the Redis documentation that the Return Value from PING is a simple string, we can use one of redigo’s handy helper functions (redis.String) to perform a type conversion to string for us.\nFor illustrative purposes in my example above, I executed the helper redis.String function separately from the Do method as I found it easier to understand on my first pass. In reality, you’ll use the redigo provided helper functions to wrap your Do method calls (provided you know the response type), as I have done in the example below. Any remaining examples will use this shortened form where appropriate.\n// ping tests connectivity for redis (PONG should be returned) func ping(c redis.Conn) error { // Send PING command to Redis  // PING command returns a Redis \u0026#34;Simple String\u0026#34;  // Use redis.String to convert the interface type to string  s, err := redis.String(c.Do(\u0026#34;PING\u0026#34;)) if err != nil { return err } fmt.Printf(\u0026#34;PING Response = %s\\n\u0026#34;, s) // Output: PONG  return nil } SET Use the Redis SET command to add a key:value pair to Redis. Below is a trivial example of adding a key (“Favorite Movie”) and a string value for it (“Repo Man”) as well as an int value (1984 as the movie Release Year). The blank identifier is used for the reply as we only need to check for errors (“OK” is the only thing that comes back on a successful SET command reply).\n// set executes the redis SET command func set(c redis.Conn) error { _, err := c.Do(\u0026#34;SET\u0026#34;, \u0026#34;Favorite Movie\u0026#34;, \u0026#34;Repo Man\u0026#34;) if err != nil { return err } _, err = c.Do(\u0026#34;SET\u0026#34;, \u0026#34;Release Year\u0026#34;, 1984) if err != nil { return err } return nil } GET In order to retrieve a value for a given key, use the Redis GET command. Some simple examples are below, including an example where no results are retrieved. We can check for redis.ErrNil to determine if nothing is returned and should handle appropriately.\n// get executes the redis GET command func get(c redis.Conn) error { // Simple GET example with String helper  key := \u0026#34;Favorite Movie\u0026#34; s, err := redis.String(c.Do(\u0026#34;GET\u0026#34;, key)) if err != nil { return (err) } fmt.Printf(\u0026#34;%s = %s\\n\u0026#34;, key, s) // Simple GET example with Int helper  key = \u0026#34;Release Year\u0026#34; i, err := redis.Int(c.Do(\u0026#34;GET\u0026#34;, key)) if err != nil { return (err) } fmt.Printf(\u0026#34;%s = %d\\n\u0026#34;, key, i) // Example where GET returns no results  key = \u0026#34;Nonexistent Key\u0026#34; s, err = redis.String(c.Do(\u0026#34;GET\u0026#34;, key)) if err == redis.ErrNil { fmt.Printf(\u0026#34;%s does not exist\\n\u0026#34;, key) } else if err != nil { return err } else { fmt.Printf(\u0026#34;%s = %s\\n\u0026#34;, key, s) } return nil } STRUCT (SET) For my purposes of building a look-aside cache, I want to store objects in cache in their entirety in Redis. There seem to be a few different viewpoints on doing this — one where you store your object using a Redis Hash data type and the HMSET command. This is nice because, if need be you can update individual values within the object independently. I have seen examples of people using the redigo AddFlat method of the redigo.Args type to accomplish this, but also noted in redigo’s FAQ that redigo does not actually provide a way to serialize structs to Redis, so I stayed away from trying this.\nFor my purposes, I am ok with just storing the data as an object in its entirety and thus decided to store my data as JSON using the SET command.\nThe example below shows storing a user, with username “otto”, with a key of “user:otto”. Use json.Marshal to serialize your object to JSON and store the serialized version as the value.\nfunc setStruct(c redis.Conn) error { const objectPrefix string = \u0026#34;user:\u0026#34; usr := User{ Username: \u0026#34;otto\u0026#34;, MobileID: 1234567890, Email: \u0026#34;ottoM@repoman.com\u0026#34;, FirstName: \u0026#34;Otto\u0026#34;, LastName: \u0026#34;Maddox\u0026#34;, } // serialize User object to JSON  json, err := json.Marshal(usr) if err != nil { return err } // SET object  _, err = c.Do(\u0026#34;SET\u0026#34;, objectPrefix+usr.Username, json) if err != nil { return err } return nil } STRUCT (GET) The example below shows retrieving the object using the GET command and then deserializing it with json.Unmarshal\nfunc getStruct(c redis.Conn) error { const objectPrefix string = \u0026#34;user:\u0026#34; username := \u0026#34;otto\u0026#34; s, err := redis.String(c.Do(\u0026#34;GET\u0026#34;, objectPrefix+username)) if err == redis.ErrNil { fmt.Println(\u0026#34;User does not exist\u0026#34;) } else if err != nil { return err } usr := User{} err = json.Unmarshal([]byte(s), \u0026amp;usr) fmt.Printf(\u0026#34;%+v\\n\u0026#34;, usr) return nil } {Username:otto MobileID:1234567890 Email:ottoM@repoman.com FirstName:Otto LastName:Maddox}  That’s it for now. Keep in mind, I wrote this main and these little functions in a somewhat non-idiomatic way just to aid in the examples, you should streamline this in a real app.\nI also created a similar main.go for the go-redis client, that you can find here. For go-redis, storing structs as Redis hashes is easier, as you can pass a map of strings type to the HMSET command.\n","date":"July 17, 2018","hero":"/images/default-hero.jpg","permalink":"https://gilcrest.github.io/posts/archive/basic-redis-examples/","summary":"Redis is pretty great. It is the #1 most loved database for the second year in a row, according to a recent Stack Overflow survey. I decided it was high time I taught myself how to use it with Go.\nThere are a number of libraries in the Go ecosystem for Redis, but the two most popular are go-redis and redigo. Each library has a decent amount of stars, contributors, etc.","tags":null,"title":"Basic Redis Examples with Go"},{"categories":null,"contents":"Hello Gopher community! This represents my first code release, albeit a minor one. I\u0026rsquo;m hopeful that this will be helpful. I believe in templates and am trying to put together a working API template from all the best practices I\u0026rsquo;ve found in the Go community. There\u0026rsquo;s more details on the github readme here\nThanks!\n","date":"October 20, 2017","hero":"/images/default-hero.jpg","permalink":"https://gilcrest.github.io/posts/archive/go-api-template/","summary":"Hello Gopher community! This represents my first code release, albeit a minor one. I\u0026rsquo;m hopeful that this will be helpful. I believe in templates and am trying to put together a working API template from all the best practices I\u0026rsquo;ve found in the Go community. There\u0026rsquo;s more details on the github readme here\nThanks!","tags":null,"title":"Go API Template v0.0.2"},{"categories":null,"contents":"Eureka! After many many brushes with many different languages over many many years, I think I finally found the language that is right for me - Go! It\u0026rsquo;s hard to say why really, but something about learning this language feels right - it\u0026rsquo;s well thought out, has a great community and is making programming fun again for me. It\u0026rsquo;s built in http libraries are incredible. I\u0026rsquo;m just beginning, but this could be my forever language :)\n","date":"January 9, 2017","hero":"/posts/archive/go/gilcrestGopher.png","permalink":"https://gilcrest.github.io/posts/archive/go/","summary":"Eureka! After many many brushes with many different languages over many many years, I think I finally found the language that is right for me - Go! It\u0026rsquo;s hard to say why really, but something about learning this language feels right - it\u0026rsquo;s well thought out, has a great community and is making programming fun again for me. It\u0026rsquo;s built in http libraries are incredible. I\u0026rsquo;m just beginning, but this could be my forever language :)","tags":null,"title":"And then there was Go..."},{"categories":null,"contents":"After stumbling through the setup of Oracle (for use with node and node-oracledb) on my new and first ever Macbook, I thought I\u0026rsquo;d put together a one pager on setup for those who may have had similar struggles. I was able to find everything I needed through existing pages, but I bounced around a lot to several different sites to find all the information and it took me several attempts. I tried to cobble all the steps together in a fairly verbose way as I had to learn certain things along the way\u0026hellip;\nHere it is - https://github.com/gilcrest/OracleMacOSXElCapitanSetup4Node\n","date":"April 5, 2016","hero":"/images/default-hero.jpg","permalink":"https://gilcrest.github.io/posts/archive/osx-oracle-node-setup/","summary":"After stumbling through the setup of Oracle (for use with node and node-oracledb) on my new and first ever Macbook, I thought I\u0026rsquo;d put together a one pager on setup for those who may have had similar struggles. I was able to find everything I needed through existing pages, but I bounced around a lot to several different sites to find all the information and it took me several attempts. I tried to cobble all the steps together in a fairly verbose way as I had to learn certain things along the way\u0026hellip;","tags":null,"title":"Setting up OS X El Capitan for node development with node-oracledb"},{"categories":null,"contents":"You may find yourself in a situation where you proudly unveil your upgraded-to-Universal Theme app to your user-base after working on it for months with your beautiful wide screen monitor (page designer pretty much mandates this) and your user-base is not quite as happy as you thought they\u0026rsquo;d be as they don\u0026rsquo;t all have super wide screens and they, for some reason, have low-resolution monitors (like 1280 x 768 low). The users may think your super cool left sidebar navigation, which is maximized by default, is neat, but they\u0026rsquo;d actually prefer their space back\u0026hellip; If you should find yourself in this situation, there is an easy answer! By default, always have that left sidebar nav minimized (I actually prefer this anyway). I turned to the Oracle APEX forum recently for the best solution to do this and forum-master, fac586 gave me a simple solution I thought I\u0026rsquo;d share for others who may need/want to do this. I\u0026rsquo;d actually love to see a declarative way of doing this in a future release of APEX (I\u0026rsquo;ll log a feature request), but until then\u0026hellip;\nFrom fac586: The simplest way to do this is with a dynamic action that simulates clicking on the button when the page is loaded with the menu expanded. Create a dynamic action as follows:\nEvent: Page Load Condition: JavaScript Expression Value: $(\u0026#39;#t_Button_navControl\u0026#39;).attr(\u0026#39;aria-expanded\u0026#39;) === \u0026#34;true\u0026#34; True Action Action: Execute JavaScript Code Fire On Page Load: No Code: $(\u0026#39;#t_Button_navControl\u0026#39;).click(); If you want to do this on every page of the application, simply create a global page (unless you already have one) and use the above configuration. You\u0026rsquo;ll need to use a condition so that this event does not fire on public pages (login and error pages, for example)\n","date":"October 15, 2015","hero":"/images/default-hero.jpg","permalink":"https://gilcrest.github.io/posts/archive/apex-minimize/","summary":"You may find yourself in a situation where you proudly unveil your upgraded-to-Universal Theme app to your user-base after working on it for months with your beautiful wide screen monitor (page designer pretty much mandates this) and your user-base is not quite as happy as you thought they\u0026rsquo;d be as they don\u0026rsquo;t all have super wide screens and they, for some reason, have low-resolution monitors (like 1280 x 768 low). The users may think your super cool left sidebar navigation, which is maximized by default, is neat, but they\u0026rsquo;d actually prefer their space back\u0026hellip; If you should find yourself in this situation, there is an easy answer!","tags":null,"title":"Apex 5 - Minimize Left Sidebar Navigation by Default"},{"categories":null,"contents":"I just released an early version of my \u0026ldquo;raiser\u0026rdquo; code for Oracle PL/SQL, leveraging OraOpenSource\u0026rsquo;s logger utility. I\u0026rsquo;d love to get anyone\u0026rsquo;s input and help with it. The Github project is https://github.com/gilcrest/raiser\nAs background, I\u0026rsquo;ve used the Quest Error Manager (QEM) in my codebase for years, but have recently switched primarily to using logger for most things. There are a few things that QEM does that logger does not\u0026hellip; In a highly distributed environment, you really need to be able to raise an exception to a user with a particular error message and unique identifier. If an exception is thrown in one of my applications at 4 in the morning, I need that user to be able to contact support with a unique ID and I need to be able to get a full trace of that error for proper debugging and resolution.\nClose to a year ago, I reached out to Martin D\u0026rsquo;Souza to ask if I could work with him to enhance the logger product to be able to achieve this type of implementation. Martin, being a fantastic product owner, pushed back saying he didn\u0026rsquo;t want logger to be a \u0026ldquo;raiser\u0026rdquo;, but was soon to release a new version of logger that would have hooks in it (in the form of a plugin) that I could use to achieve my goals\u0026hellip; Great! So, he did what he said he would - logger 3.0.0 and above has a really cool plugin facility that I\u0026rsquo;ve utilized to make a \u0026ldquo;raiser\u0026rdquo; out of logger.\nAlso, after reading Dan McGhan\u0026rsquo;s excellent post about using the APEX_JSON package for creating JSON content, I got the idea to encapsulate multiple fields into the Oracle exception text using JSON\u0026hellip; I had been struggling to figure out a good way to be able to give end users multiple data points with just the one SQLERRM output, but I think this works out nicely.\nI plan to add a lot more in the coming weeks to the code - for instance, an example of using the code within an APEX error handle function to return a unique logger identifier to end users. Someday, I\u0026rsquo;d also like to eventually work through some clients (java, javascript, python, etc.).\nThe first order of business is to fix the current getErrorDetails function to parse the JSON SQLERRM and how to work with it\u0026hellip;\n","date":"August 17, 2015","hero":"/images/default-hero.jpg","permalink":"https://gilcrest.github.io/posts/archive/raiser/","summary":"I just released an early version of my \u0026ldquo;raiser\u0026rdquo; code for Oracle PL/SQL, leveraging OraOpenSource\u0026rsquo;s logger utility. I\u0026rsquo;d love to get anyone\u0026rsquo;s input and help with it. The Github project is https://github.com/gilcrest/raiser\nAs background, I\u0026rsquo;ve used the Quest Error Manager (QEM) in my codebase for years, but have recently switched primarily to using logger for most things. There are a few things that QEM does that logger does not\u0026hellip; In a highly distributed environment, you really need to be able to raise an exception to a user with a particular error message and unique identifier.","tags":null,"title":"Raiser v0.5 - Committed to Github"},{"categories":null,"contents":"Next step - node.js setup on Ubuntu. This was remarkably easy! I went to https://nodejs.org/ and viewed their Downloads section, where I then went to \u0026ldquo;Installing from package managers\u0026rdquo;. That link takes you to this URL on GitHub. If you read the first line of \u0026ldquo;Debian and Ubuntu based Linux distributions\u0026rdquo;, you\u0026rsquo;ll note you should go to nodesource\u0026rsquo;s blog post for the most up to date instructions. I did what I was told - read what they have to say on the page - helpful stuff!\nThe instructions to install are as follows:\nOpen a new crosh window or use ctrl+alt+t and type:\nshell To get into Ubuntu, type:\nsudo startxfce4 Inside Ubuntu, click on the Terminal Emulator icon\nYou now need curl (a tool for making http calls, etc. - http://en.wikipedia.org/wiki/CURL), so get it - type:\nsudo apt-get install curl The instructions from nodesource\u0026rsquo;s blog post say to then enter the following:\n# Note the new setup script name for Node.js v0.12 curl -sL https://deb.nodesource.com/setup_0.12 | sudo bash - # Then install with: sudo apt-get install -y nodejs Type node to start node..\nThat\u0026rsquo;s it! node.js is installed in Ubuntu inside my chromebook!\nThere are a TON of node.js intros, etc. that I\u0026rsquo;ve been pouring over for a while now - I\u0026rsquo;m not going to bother to explain the basics of node as it\u0026rsquo;s extremely well documented. I will now start to write some small pl/sql and js programs using the node-oracledb driver and will continue to blog as things progress in that area\u0026hellip; That\u0026rsquo;s it for today!\n","date":"March 16, 2015","hero":"/images/default-hero.jpg","permalink":"https://gilcrest.github.io/posts/archive/node-oracle-glory/volume-3/","summary":"Next step - node.js setup on Ubuntu. This was remarkably easy! I went to https://nodejs.org/ and viewed their Downloads section, where I then went to \u0026ldquo;Installing from package managers\u0026rdquo;. That link takes you to this URL on GitHub. If you read the first line of \u0026ldquo;Debian and Ubuntu based Linux distributions\u0026rdquo;, you\u0026rsquo;ll note you should go to nodesource\u0026rsquo;s blog post for the most up to date instructions. I did what I was told - read what they have to say on the page - helpful stuff!","tags":null,"title":"My Path to node.js and Oracle Glory - Volume 3"},{"categories":null,"contents":"OK, so now having established my database server in Volume 1 of this series, I now need to move to the next step - setting up my chromebook with Linux in order to facilitate node.js development. I chose a chromebook as my dev machine of choice as I wanted something that natively runs on Linux, but didn\u0026rsquo;t want to pay as much as a Mac and didn\u0026rsquo;t really like the Linux based machine options out there\u0026hellip; Google is doing a great job with these and after having my chromebook for a little over a week - I have to say I love it\u0026hellip;\nThe first step is to put your chromebook into developer mode - this is a fairly frightening experience, but since everything on your chromebook is \u0026ldquo;in the cloud\u0026rdquo; and can be restored, fear not and hack on!\nI bought a Toshiba Chromebook 2 and found instructions to put the machine into developer mode at this URL and this URL as well\u0026hellip;\n To put it your chromebook into developer mode, you simply hit the esc+refresh+power keys at the same time after you\u0026rsquo;ve logged in. When you do this, your machine will reboot and show an alert screen - at this point, hit Ctrl+D to go into Developer mode. THIS WILL WIPE YOUR MACHINE! You\u0026rsquo;ll need to re-login and setup the machine again, but once done you won\u0026rsquo;t need to do this again\u0026hellip; I bought this machine to develop, so this was basically the first thing I did with it - the data wipe didn\u0026rsquo;t concern me\u0026hellip; Since most things you do are auto backed-up to Google drive, this probably won\u0026rsquo;t concern most people. The process for the laptop to transition to Developer Mode takes 15 minutes or so (one time only) - so go grab a beer\u0026hellip;  Next up - Crouton! \u0026hellip;What the hell does a crouton have to do with this? Well, crouton stands for ChRomium Os Universal chrooT envirONment - and all the information you really need about it is at the GitHub location here. This is now the point where I\u0026rsquo;m over my head, but I believe crouton is a set of scripts written by a prolific Google developer named David Schneider that allows you to create what\u0026rsquo;s known as a chroot, which allows Linux distributions to run under a segregated file system as a guest OS - more info about chroots here\nBasically, in order to run Ubuntu (the Linux distribution I\u0026rsquo;ve chosen) alongside my ChromeOS, I need to run it within a chroot. I need to use the crouton script bundle to generate this chroot.\nYou should go to https://goo.gl/fd3zc - it will download into your Downloads folder - leave it there.\nIn order to properly generate a chroot - you have to have some opinions. You need to choose a Linux distribution and a desktop environment\u0026hellip;\nI need to choose a Linux distribution? I have no idea where to start even - there are over 600 distributions of Linux and 300 are actively being developed!! Where do you even begin in this world? My understanding of a distribution of Linux is that it is a packaging of software (libraries, desktop environment, utilities, GUI, etc.). I have a lot to learn on this, but for now I\u0026rsquo;m going to be lame and choose a commercially backed option - Ubuntu. I am choosing the most recent \u0026ldquo;Long Term Support\u0026rdquo; (LTS) version of this distro, code named Trusty Tahr.\nWithin Ubuntu, there are different flavors based on the desktop environment you prefer. After some basic research, I want a basic desktop - I actually installed several different versions and thought the Unity desktop was awful\u0026hellip; So, I\u0026rsquo;m going with Xfce - a basic, yet comfortable desktop environment! This flavor of Ubuntu is known as Xubuntu\u0026hellip;\nI have my opinions settled - I know what I want - next is to go to the Chrome web store and install a few items\n Secure Shell Crosh Window - opens a separate window from your browser crouton extension - Allows for copy/paste to/from guest OS window (in my case Ubuntu)  You now have all your dependencies - you can either do Ctrl+alt+t to open a \u0026ldquo;Chrome Operating Shell\u0026rdquo; or crosh for short in a full screen window or you can use the Crosh Window app you just installed.\n At the command prompt, type shell Next type sudo sh ~/Downloads/crouton -t xiwi,xfce -r trusty  This is basically telling crouton that the target (-t) is the xfce desktop environment using the xiwi version (which allows for the copy/paste) and the distribution release (-r) should be Trusty Tahr (trusty) This takes a while to install - go get another beer\u0026hellip; At the very end of the install, you\u0026rsquo;ll be asked \u0026ldquo;Please specify a username for the primary user:\u0026rdquo; - plug in your preferred username\u0026hellip; you\u0026rsquo;ll then be asked for a password as well\u0026hellip;    Once done, you\u0026rsquo;ll be taken back to the shell prompt where you just type sudo startxfce4 and bam! Ubuntu should boot! It will boot in a full screen Chrome OS window - in order to minimize and size the window, just click at the top where it says \u0026ldquo;crouton integration\u0026rdquo; triggered full screen Exit full screen and then resize as necessary.\nEach time you log out of Ubuntu, you want to ensure you logout properly - for the distro I chose, I just go to the upper right hand corner where my username is, choose it and select Log Out\u0026hellip;\nNow that I\u0026rsquo;ve done this once, the next time is a breeze - open a new Crosh Window, type sudo startxfce4 and that\u0026rsquo;s it - I\u0026rsquo;m up and running in seconds.\nI learned a lot about this crouton extension jazz by reading this - the dude Francois Beaufort seems to be one of the chromebook leads and has a lot of great posts\u0026hellip; You probably want to follow him on Google + if you have a chromebook and are a developer.\nOK - it worked - I have Linux up and running within a Chrome OS Window! Sweet!\nThat\u0026rsquo;s it for today - next up Volume 3, Setting up node.js on Ubuntu in my Chromebook ","date":"March 14, 2015","hero":"/images/default-hero.jpg","permalink":"https://gilcrest.github.io/posts/archive/node-oracle-glory/volume-2/","summary":"OK, so now having established my database server in Volume 1 of this series, I now need to move to the next step - setting up my chromebook with Linux in order to facilitate node.js development. I chose a chromebook as my dev machine of choice as I wanted something that natively runs on Linux, but didn\u0026rsquo;t want to pay as much as a Mac and didn\u0026rsquo;t really like the Linux based machine options out there\u0026hellip; Google is doing a great job with these and after having my chromebook for a little over a week - I have to say I love it\u0026hellip;","tags":null,"title":"My Path to node.js and Oracle Glory - Volume 2"},{"categories":null,"contents":"I am starting a new personal project with the following goals in mind:\n Learn JavaScript (I\u0026rsquo;m a beginner, but been reading/implementing for a while) Learn node.js Create a RESTful API using node.js calling a remote database server using Oracle\u0026rsquo;s node driver (node-oracledb)   API should be simple to understand API in the backend should use the HR sample schema When using node.js, goal is to form a service request object in javascript and pass that object to a stored procedure in Oracle as an IN parameter, the same stored procedure should return a response object that will be parsed in javascript and the results displayed   DISCLAIMER - When I actually have free time to develop - I am primarily a PL/SQL developer \u0026ndash; I love PL/SQL - there I said it! I work with java and perl, but at the end of the day, I love the insulated, hassle-free world of developing within a database. I know enough of command line to get by, but my 4th major goal is to become a command line \u0026ldquo;expert\u0026rdquo; (or at least know where all the relevant references I need are) for sqlplus and more importantly Linux, so bear with me as I toil through the basics along the way!\n So, on to the actual work - I am going to setup two machines on my home network \u0026ndash; one machine (an old Windows 7 laptop) will act as a database server, the other machine (my new Chromebook) will act as the calling application (in this case node.js using Oracle\u0026rsquo;s node-Oracledb driver).\nStep 1. Install Oracle XE on my windows machine using this URL - I won\u0026rsquo;t go into depth on how to install XE as it\u0026rsquo;s well documented.\nStep 2. DO NOT DO THIS! Live and learn - I had no idea that the HR and other sample schemas are already installed with XE and went through all the below steps to clone and install the schema, only to figure out that I had accidentally installed the HR objects in the SYSTEM schema (I\u0026rsquo;ve now corrected the steps)\u0026hellip;. Anyway, if for some reason, you need to install Oracle\u0026rsquo;s sample schemas in your XE instance using Christopher Jones' db-sample-schemas on Github at this URL, then follow these steps!\n  If you\u0026rsquo;re not familiar with Github, it\u0026rsquo;s definitely worth your while to learn about it, though there is a learning curve (I still suck at it, actually, but getting there\u0026hellip;)\n  Install Github for Windows using this URL\n  Once installed, you can just go to https://github.com/oracle/db-sample-schemas.git and choose \u0026ldquo;Clone in Desktop\u0026rdquo; and choose the folder location you wish to store the db-sample-schemas repository. If you\u0026rsquo;re not comfortable with Github yet - you can always get the same files by choosing \u0026ldquo;Download ZIP\u0026rdquo;\n  After you\u0026rsquo;ve cloned or downloaded the files, navigate to the human_resources directory using the Windows command line interface (cmd.exe).\n  When you\u0026rsquo;re in the directory, type sqlplus - you\u0026rsquo;ll then be asked to login - be sure to login as the HR schema. I am assuming you\u0026rsquo;ve already created the HR schema. If you have not, you should - you\u0026rsquo;ll need to figure that out on your own though. You can look at the hr_main.sql in the human_resources directory that you just downloaded for an example of creating HR.\n  After you\u0026rsquo;re logged in as HR in sqlplus, just type @hr_cre.sql - sqlplus will then execute the script and create all the necessary objects. You can then type @hr_popul.sql to populate the tables you just created with data!\n  Anyway, if you screw things up like I did, Christopher has nicely provided a script hr_drop.sql that you can run whenever necessary.\n  Step 3. Open up Windows firewall for Port 1521:\n  To enable remote calls from my Chromebook, I need to enable Firewall rules on my Windows machine so that data can flow in and out of the machine through port 1521 (the standard port that Oracle is configured for)\n  First, you want to be sure your listener is up and running for the Oracle XE instance you installed (it should be by default), but you can check in the Windows command line interface (cmd.exe) by typing lsnrctl status (you don\u0026rsquo;t have to browse anywhere in particular for this command)\n  You can find out some critical items from this status, ie your HOST and PORT (will be 1521 by default) which you\u0026rsquo;ll need when connecting later\n  Click here for more information on Managing Network Connections - doc shows you how to stop and start your db listener if you need me to\u0026hellip;\n    Assuming you are using the default port, next step is to open up connections (inbound and outbound) on it\n Goto Start -\u0026gt; Control Panel -\u0026gt; System and Security -\u0026gt; Windows Firewall -\u0026gt; Advanced settings  Once in Advanced Settings, you\u0026rsquo;ll see a window titled \u0026ldquo;Windows Firewall with Advanced Security\u0026rdquo; click on Inbound Rules and choose the \u0026ldquo;New Rule\u0026hellip;\u0026rdquo; action Choose \u0026ldquo;Port\u0026rdquo; when asked What type of rule would you like to create? Choose TCP when asked Does this apply to TCP or UDP? Add 1521 next to Specified Local Ports Choose Allow the connection Rule applies to whichever domain you choose\u0026hellip; Give the rule a name - I chose OracleInboundPort, click Finish Rinse and repeat the above for the Outbound Rules, just name the rule appropriately, i.e. OracleOutboundPort      That\u0026rsquo;s it for today - next up Volume 2, Configuring Linux on my Chromebook ","date":"March 9, 2015","hero":"/images/default-hero.jpg","permalink":"https://gilcrest.github.io/posts/archive/node-oracle-glory/volume-1/","summary":"I am starting a new personal project with the following goals in mind:\n Learn JavaScript (I\u0026rsquo;m a beginner, but been reading/implementing for a while) Learn node.js Create a RESTful API using node.js calling a remote database server using Oracle\u0026rsquo;s node driver (node-oracledb)   API should be simple to understand API in the backend should use the HR sample schema When using node.js, goal is to form a service request object in javascript and pass that object to a stored procedure in Oracle as an IN parameter, the same stored procedure should return a response object that will be parsed in javascript and the results displayed   DISCLAIMER - When I actually have free time to develop - I am primarily a PL/SQL developer \u0026ndash; I love PL/SQL - there I said it!","tags":null,"title":"My Path to node.js and Oracle Glory - Volume 1"},{"categories":null,"contents":"I recently ran into an issue where, as part of a webservice call I was making using the Oracle APEX_WEB_SERVICE API, I needed to pass the application id and password in the soap header, but I did not want those sensitive data elements to be exposed in my pl/sql code in cleartext. I decided I wanted to encrypt the data and retrieve it at run time as a function call. I tried to find a way to do this via Stack Overflow, Google, etc. but was unable to find a very simple way to do this\u0026hellip;.\nI found many great posts on how to do encryption, but I was looking for a dead easy way to encrypt and persist random pieces of data and be able to retrieve it when necessary just as easily\u0026hellip; I decided to build the solution myself! I have put a project up on GitHub, that I named Name:Value Encryption or NVE. You can find the code on Github at https://github.com/gilcrest/nve\nThis is definitely v1 of the code and I\u0026rsquo;d love for the community to participate and give me pull requests to improve this! My first mistake may be calling this Name:Value instead of Key:Value - not sure which is more accepted at this point\u0026hellip;\n","date":"December 17, 2014","hero":"/images/default-hero.jpg","permalink":"https://gilcrest.github.io/posts/archive/name-value-encryption/","summary":"I recently ran into an issue where, as part of a webservice call I was making using the Oracle APEX_WEB_SERVICE API, I needed to pass the application id and password in the soap header, but I did not want those sensitive data elements to be exposed in my pl/sql code in cleartext. I decided I wanted to encrypt the data and retrieve it at run time as a function call. I tried to find a way to do this via Stack Overflow, Google, etc.","tags":null,"title":"Name:Value Encryption Utility using PL/SQL"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://gilcrest.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"}]